from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QTableWidget, QTableWidgetItem, QHeaderView,
    QMessageBox, QLineEdit, QLabel, QComboBox,
    QAbstractItemView, QInputDialog
)
from PyQt6.QtCore import Qt, pyqtSignal, QDateTime
from whatsapp_warmer.utils.logger import get_logger
from whatsapp_warmer.core.models.account import WhatsAppAccount
from whatsapp_warmer.core.models.proxy import ProxyConfig
from typing import Optional, List
from datetime import datetime

logger = get_logger(__name__)


class AccountsTab(QWidget):
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""

    # –°–∏–≥–Ω–∞–ª—ã
    account_added = pyqtSignal(dict)
    account_updated = pyqtSignal(str, dict)
    account_removed = pyqtSignal(str)
    proxy_changed = pyqtSignal(str, object)

    def __init__(self, account_manager, proxy_handler=None):
        super().__init__()
        self.logger = logger.getChild('AccountsTab')
        self.account_manager = account_manager
        self.proxy_handler = proxy_handler

        self._init_ui()
        self._setup_context_menu()
        self._load_accounts()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        self.account_manager.accounts_changed.connect(self._load_accounts)

    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = QVBoxLayout()
        self.setLayout(main_layout)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = QHBoxLayout()

        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.add_btn.clicked.connect(self._show_add_dialog)
        toolbar.addWidget(self.add_btn)

        self.import_btn = QPushButton("üìÅ –ò–º–ø–æ—Ä—Ç")
        self.import_btn.clicked.connect(self._import_accounts)
        toolbar.addWidget(self.import_btn)

        self.export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.clicked.connect(self._export_accounts)
        toolbar.addWidget(self.export_btn)

        main_layout.addLayout(toolbar)

        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.table = QTableWidget()
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels([
            "ID", "–ù–æ–º–µ—Ä", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–æ–∫—Å–∏", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        self.table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        self.table.verticalHeader().setVisible(False)
        main_layout.addWidget(self.table)

    def _setup_context_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        self.table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self._show_context_menu)

    def _load_accounts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.table.setRowCount(0)

        for account in self.account_manager.get_all_accounts():
            row = self.table.rowCount()
            self.table.insertRow(row)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self._fill_account_row(row, account)

    def _fill_account_row(self, row: int, account: WhatsAppAccount):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        # ID
        self.table.setItem(row, 0, QTableWidgetItem(str(account.id)))

        # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_item = QTableWidgetItem(account.phone)
        phone_item.setData(Qt.ItemDataRole.UserRole, account.id)
        self.table.setItem(row, 1, phone_item)

        # –°—Ç–∞—Ç—É—Å
        status_item = QTableWidgetItem()
        status_item.setText("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if account.enabled else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
        status_item.setForeground(Qt.GlobalColor.darkGreen if account.enabled else Qt.GlobalColor.red)
        self.table.setItem(row, 2, status_item)

        # –ü—Ä–æ–∫—Å–∏
        proxy_text = f"{account.proxy.host}:{account.proxy.port}" if account.proxy else "–ù–µ—Ç"
        self.table.setItem(row, 3, QTableWidgetItem(proxy_text))

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_active = account.last_active.strftime("%d.%m.%Y %H:%M") if account.last_active else "–ù–∏–∫–æ–≥–¥–∞"
        self.table.setItem(row, 4, QTableWidgetItem(last_active))

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_widget = QWidget()
        action_layout = QHBoxLayout()
        action_widget.setLayout(action_layout)

        edit_btn = QPushButton("‚úèÔ∏è")
        edit_btn.clicked.connect(lambda: self._edit_account(account.id))
        action_layout.addWidget(edit_btn)

        toggle_btn = QPushButton("üîÑ")
        toggle_btn.clicked.connect(lambda: self._toggle_account(account.id))
        action_layout.addWidget(toggle_btn)

        remove_btn = QPushButton("üóëÔ∏è")
        remove_btn.clicked.connect(lambda: self._remove_account(account.id))
        action_layout.addWidget(remove_btn)

        self.table.setCellWidget(row, 5, action_widget)

    def _show_add_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        dialog = AccountDialog(self.account_manager, self.proxy_handler, self)
        if dialog.exec():
            account_data = dialog.get_account_data()
            try:
                self.account_manager.add_account(account_data)
                self.account_added.emit(account_data)
            except Exception as e:
                self._show_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}")

    def _edit_account(self, account_id: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        account = self.account_manager.get_account(account_id)
        if not account:
            return

        dialog = AccountDialog(
            self.account_manager,
            self.proxy_handler,
            self,
            edit_mode=True,
            account=account
        )

        if dialog.exec():
            updated_data = dialog.get_account_data()
            try:
                self.account_manager.update_account(account_id, updated_data)
                self.account_updated.emit(account_id, updated_data)
            except Exception as e:
                self._show_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

    def _toggle_account(self, account_id: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = self.account_manager.get_account(account_id)
            if account:
                account.enabled = not account.enabled
                account.last_updated = datetime.now()
                self.account_manager.save_to_file()
                self._load_accounts()
        except Exception as e:
            self._show_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def _remove_account(self, account_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            try:
                self.account_manager.remove_account(account_id)
                self.account_removed.emit(account_id)
            except Exception as e:
                self._show_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

    def _show_context_menu(self, position):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu = QMenu()

        selected_row = self.table.rowAt(position.y())
        if selected_row >= 0:
            account_id = self.table.item(selected_row, 0).text()

            edit_action = menu.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
            edit_action.triggered.connect(lambda: self._edit_account(account_id))

            toggle_action = menu.addAction("–í–∫–ª/–í—ã–∫–ª")
            toggle_action.triggered.connect(lambda: self._toggle_account(account_id))

            remove_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å")
            remove_action.triggered.connect(lambda: self._remove_account(account_id))

            menu.addSeparator()

        refresh_action = menu.addAction("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        refresh_action.triggered.connect(self._load_accounts)

        menu.exec(self.table.viewport().mapToGlobal(position))

    def _import_accounts(self):
        """–ò–º–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞...
        pass

    def _export_accounts(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞...
        pass

    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)
        self.logger.error(message)


class AccountDialog(QDialog):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""

    def __init__(self, account_manager, proxy_handler=None, parent=None, edit_mode=False, account=None):
        super().__init__(parent)
        self.account_manager = account_manager
        self.proxy_handler = proxy_handler
        self.edit_mode = edit_mode
        self.account = account

        self._init_ui()

    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" if self.edit_mode else "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        layout = QFormLayout()
        self.setLayout(layout)

        # –ü–æ–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        self.phone_edit = QLineEdit()
        self.phone_edit.setPlaceholderText("79XXXXXXXXX")
        if self.edit_mode and self.account:
            self.phone_edit.setText(self.account.phone)
            self.phone_edit.setEnabled(False)  # –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        layout.addRow("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", self.phone_edit)

        # –í—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏
        if self.proxy_handler:
            self.proxy_combo = QComboBox()
            self._load_proxies()
            layout.addRow("–ü—Ä–æ–∫—Å–∏:", self.proxy_combo)

        # –ö–Ω–æ–ø–∫–∏
        btn_box = QDialogButtonBox()
        btn_box.addButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", QDialogButtonBox.ButtonRole.AcceptRole)
        btn_box.addButton("–û—Ç–º–µ–Ω–∞", QDialogButtonBox.ButtonRole.RejectRole)
        btn_box.accepted.connect(self.accept)
        btn_box.rejected.connect(self.reject)
        layout.addRow(btn_box)

    def _load_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤ –∫–æ–º–±–æ–±–æ–∫—Å"""
        self.proxy_combo.clear()
        self.proxy_combo.addItem("–ë–µ–∑ –ø—Ä–æ–∫—Å–∏", None)

        for proxy in self.proxy_handler.get_all_proxies():
            self.proxy_combo.addItem(
                f"{proxy.host}:{proxy.port} ({proxy.type})",
                proxy
            )

        if self.edit_mode and self.account and self.account.proxy:
            index = self.proxy_combo.findData(self.account.proxy)
            if index >= 0:
                self.proxy_combo.setCurrentIndex(index)

    def get_account_data(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ñ–æ—Ä–º—ã"""
        data = {
            'phone': self.phone_edit.text().strip(),
            'enabled': True
        }

        if self.proxy_handler:
            data['proxy'] = self.proxy_combo.currentData()

        return data